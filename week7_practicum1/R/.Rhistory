library(DBI)
library(RMySQL)
# use readr to load csv file
library(readr)
# forces sqldf to use SQLite as its backing store
library(sqldf)
options(sqldf.driver = 'SQLite')
dbcon <- dbConnect(MySQL(), user = 'root', password = 'root',
dbname = 'bird_strike', host = 'localhost', port = 3306)
bird_strikes <- read.csv("BirdStrikesData-V2.csv")
# remove all military flights(89 rows) -> 25469 rows
bird_strikes <- bird_strikes[!bird_strikes$airline == 'MILITARY',]
# remove records without flight information(aircraft,flight_date...) -> 25340 rows(129 rows removed)
# NOTE: '&' or '|' will evaluate the whole vector, while '&&' and '||' will only evaluate the first element
bird_strikes <- bird_strikes[!(bird_strikes$aircraft == '' & bird_strikes$flight_date == ''),]
bird_strikes
airports <- sqldf('SELECT DISTINCT airport AS airport_name, origin AS state
FROM bird_strikes
ORDER BY state')
# omit rows with airport_name be empty
# airports <- airports[!(airports$airport_name == ''),]
# if the state is N/A, the airport is not reside within USA, leave it empty
airports$state[airports$state == 'N/A'] <- ''
airports
conditions <- sqldf('SELECT DISTINCT sky_conditions FROM bird_strikes')
conditions
populate_airports <- function() {
# iterate airports data frame
for (i in 1:nrow(airports)) {
# use "" to include value, value may contain ' \' '
airport_name <- paste0('"', airports[i,1], '"')
state <- paste0('"', airports[i,2], '"')
cmd<-paste0('INSERT INTO airports(airport_name, state) VALUES (', airport_name, ',' , state, ')')
dbExecute(dbcon,cmd)
}
}
populate_airports()
populate_conditions <- function() {
# iterate conditions data frame
for (i in 1:nrow(conditions)) {
# use "" to include value
sky_conditions <- paste0('"', conditions[i,1], '"')
cmd<-paste0('INSERT INTO conditions(sky_conditions) VALUES (', sky_conditions, ')')
dbExecute(dbcon,cmd)
}
}
populate_conditions()
populate_incidents <- function() {
# iterate incidents data frame
# for (i in 1:10)
for (i in 1:nrow(bird_strikes)){
# rid
rid <- bird_strikes[i, 1]
# rid <- paste0('"', bird_strikes[i, 1], '"')
# modify flight_date
tmp_date <- strsplit(bird_strikes[i, 7], ' ')[[1]] # omid time
tmp_date <- strsplit(tmp_date[[1]], '/')[[1]] # split y,m,d
# MySQL permits a “relaxed” format for values specified as strings
# for example, any punctuation chracter may be used as the delimiter;
# moreover, it will autofill prefix 0 for month and day(1-9)
flight_date <- paste(tmp_date[[3]], tmp_date[[1]], tmp_date[[2]], sep = '-')
# flight_date <- paste(paste0('20', tmp_date[[3]]), tmp_date[[1]], tmp_date[[2]], sep = '-')
flight_date <- paste0('"', flight_date, '"')
# query airports table to get origin_id(aid),
# both the airport_name and state name should be matched
airport_name <- bird_strikes[i, 3]
state <- bird_strikes[i, 10]
# modify state with 'N/A' value to empty string
if(state == 'N/A'){
state <- ''
}
aid_query<-paste0('SELECT aid FROM airports WHERE airport_name =', '"', airport_name, '"', 'AND state =', '"', state, '"')
aid <- dbGetQuery(dbcon, aid_query);
origin_id <- aid[1, 1]
# airline
airline <- paste0('"', bird_strikes[i, 9], '"')
# aircraft
aircraft <- paste0('"', bird_strikes[i, 2], '"')
# modify flight_phase
# Assumption:
# 1. 'Take-off run' belongs to takeoff phase
# 2. 'Climb', 'Descent', 'Approach' belongs to inflight phase
# 3. 'Landing Roll' belongs to landing phase
# 4. 'Taxi' can be Taxi-out and Taxi-in; 'Parked' is at the very end of flight phase
#    thus they belongs to unknown phase
flight_phase <- bird_strikes[i, 11]
if(flight_phase == 'Take-off run'){
flight_phase <- 'takeoff'
} else if (flight_phase == 'Climb' | flight_phase == 'Descent' | flight_phase == 'Approach'){
flight_phase <- 'inflight'
} else if (flight_phase == 'Landing Roll'){
flight_phase <- 'landing'
} else {
# Taxi && Parked
flight_phase <- 'unknown'
}
flight_phase <- paste0('"', flight_phase, '"')
# altitude, no need to include it with ""
altitude_str <- bird_strikes[i, 18]
# get the first splitted subset
splitted_str <- strsplit(altitude_str, ',')[[1]]
altitude <- ''
# convert '1,500' into '1500'
for(str in splitted_str){
altitude <- paste0(altitude, str)
}
# query conditions table to get condition_id(cid)
cid_query<-paste0('SELECT cid FROM conditions WHERE sky_conditions=', '"', bird_strikes[i, 15], '"')
cid <- dbGetQuery(dbcon, cid_query);
condition_id <- cid[1, 1]
# warning, no need to include it with ""
warning <- bird_strikes[i, 17]
if(warning == 'N'){
warning <- 'FALSE'
} else {
warning <- 'TRUE'
}
# execute statement
cmd<-paste0('INSERT INTO incidents VALUES (', rid, ',', flight_date, ',', origin_id, ',', airline, ',', aircraft, ',',
flight_phase, ',', altitude, ',', condition_id, ',', warning, ')')
dbExecute(dbcon,cmd)
}
}
populate_incidents()
# import ggplot2 library for drawing column graph
library(ggplot2)
cmd <- "SELECT SUBSTR(flight_date, 1, 4) AS year, COUNT(rid) as total FROM incidents
GROUP BY year
HAVING year >= '2005' AND year <= '2011'
ORDER BY year;"
rs <- dbGetQuery(dbcon, cmd)
rs
# set the stat = 'identity' tells ggplot2 that the y-value is provided
# instead of counting the # of rows for x-value
# add column bar, data labels
graph <- ggplot(rs, aes(x = year, y = total)) + geom_bar(stat='identity', width = 0.5) + geom_text(aes(label = total), vjust = -0.5)
# add axis labels, titles
graph <- graph + labs(title = 'Number of Bird Strikes Incidents from 2005 to 2011',
x = 'Year', y = 'Total Number of Incidents')
graph
dbDisconnect(dbcon)
