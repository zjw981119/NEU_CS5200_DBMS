library(XML)
wd = getwd()
fpath = paste0(wd, "/")
# read XML file
xmlFile <- paste0(fpath, "Books-v3.xml")
xmlObj <- xmlParse(xmlFile)
# get the size of DOM
r <- xmlRoot(xmlObj)
size <- xmlSize(r)
r[[14]]
r[[14]][[1]]
if (length(xpathSApply(r[[14]], "//edition")) > 0)  {
print("The first child element of r has an attribute 'edition'")
} else {
print("The first child element of r does not have an attribute 'edition'")
}
edition <- xpathSApply(r[[11]], "//edition")
edition
r[[14]]
r[[14]][[1]]
if (length(xpathSApply(r[[14]], "./edition")) > 0)  {
print("The first child element of r has an attribute 'edition'")
} else {
print("The first child element of r does not have an attribute 'edition'")
}
edition <- xpathSApply(r[[11]], "//edition")
edition
r[[14]]
r[[14]][[1]]
if (length(xpathSApply(r[[14]], "./edition")) > 0)  {
print("The first child element of r has an attribute 'edition'")
} else {
print("The first child element of r does not have an attribute 'edition'")
}
edition <- xpathSApply(r[[11]], "./edition")
edition
r[[14]]
r[[14]][[1]]
if (length(xpathSApply(r[[14]], "./edition")) > 0)  {
print("The first child element of r has an attribute 'edition'")
} else {
print("The first child element of r does not have an attribute 'edition'")
}
edition <- xpathSApply(r[[11]], "./edition")
length(edition)
r[[14]]
r[[14]][[1]]
if (length(xpathSApply(r[[14]], "./edition")) > 0)  {
print("The first child element of r has an attribute 'edition'")
} else {
print("The first child element of r does not have an attribute 'edition'")
}
edition <- xpathSApply(r[[14]], "./edition")
edition
length(edition)
r[[14]]
r[[14]][[1]]
if (length(xpathSApply(r[[14]], "./edition")) > 0)  {
print("The first child element of r has an attribute 'edition'")
} else {
print("The first child element of r does not have an attribute 'edition'")
}
edition <- xpathSApply(r[[14]], "./edition", xmlValue)
edition
length(edition)
r[[14]]
r[[14]][[1]]
if (length(xpathSApply(r[[14]], "./edition")) > 0)  {
print("The first child element of r has an attribute 'edition'")
} else {
print("The first child element of r does not have an attribute 'edition'")
}
edition <- xpathSApply(r[[11]], "./edition", xmlValue)
edition
length(edition)
r[[14]]
r[[14]][[1]]
if (length(xpathSApply(r[[14]], "./edition")) > 0)  {
print("The first child element of r has an attribute 'edition'")
} else {
print("The first child element of r does not have an attribute 'edition'")
}
edition <- xpathSApply(r[[14]], "./edition", xmlValue)
edition
length(edition)
# stringsAsFactors=F tells R not to convert character vectors into factors when creating a data frame
BookDetail <- data.frame(title = character(),
author = character(),
genre = character(),
price = numeric(),
description = character(),
stringsAsFactors = F)
EditionDetail <- data.frame(eid = integer(),
edition = character(),
publish_date = character(),
stringsAsFactors = F)
Book <- data.frame(bid = integer(),
title = character(),
eid = integer(),
stringsAsFactors = F)
#BookDetail[1,] <- parseBookDetail(r[[1]])
# BookDetail[2,] <- parseBookDetail(r[[2]])
#BookDetail
edition <- xpathSApply(r[[11]], "./edition", xmlValue)
EditionDetail[1,] <- parseEditionDetail(edition, "2000-12-16")
parseBookDetail <- function(curNode)
{
# if using //book/title, even pass the single node, it will extract titles of the whole document
title <- xpathSApply(curNode, "./title", xmlValue)
author <- xpathSApply(curNode, "./author", xmlValue)
genre <- xpathSApply(curNode, "./genre", xmlValue)
price <- as.numeric(xpathSApply(curNode, "./price", xmlValue))
description <- xpathSApply(curNode, "./description", xmlValue)
newBookDetail.df <- data.frame(title, author, genre, price, description, stringsAsFactors = F)
return(newBookDetail.df)
}
parseEditionDetail <- function(edition, publish_date)
{
# no edition, default 1
if(length(edition) != 1){
edition <- 1
} else {
edition <- as.integer(edition)
}
newEditionDetail.df <- data.frame(edition, publish_date, stringsAsFactors = F)
return(newBookDetail.df)
}
checkTitle <- function(title) {
index <- match(title, BookDetail$title)
if (!is.na(index)) {
return(index)
} else {
return(-1)
}
}
checkEdition <- function(edition, publish_date) {
# check if EditionDetail data frame contains the row
row_index <- which(EditionDetail$edition == edition & EditionDetail$publish_date == publish_date)
if (length(row_index) > 0) {
return(row_index)
} else {
return(-1)
}
}
#BookDetail[1,] <- parseBookDetail(r[[1]])
# BookDetail[2,] <- parseBookDetail(r[[2]])
#BookDetail
edition <- xpathSApply(r[[11]], "./edition", xmlValue)
EditionDetail[1,] <- parseEditionDetail(edition, "2000-12-16")
parseBookDetail <- function(curNode)
{
# if using //book/title, even pass the single node, it will extract titles of the whole document
title <- xpathSApply(curNode, "./title", xmlValue)
author <- xpathSApply(curNode, "./author", xmlValue)
genre <- xpathSApply(curNode, "./genre", xmlValue)
price <- as.numeric(xpathSApply(curNode, "./price", xmlValue))
description <- xpathSApply(curNode, "./description", xmlValue)
newBookDetail.df <- data.frame(title, author, genre, price, description, stringsAsFactors = F)
return(newBookDetail.df)
}
parseEditionDetail <- function(edition, publish_date)
{
# no edition, default 1
if(length(edition) != 1){
edition <- 1
} else {
edition <- as.integer(edition)
}
newEditionDetail.df <- data.frame(edition, publish_date, stringsAsFactors = F)
return(newEditionDetail.df)
}
#BookDetail[1,] <- parseBookDetail(r[[1]])
# BookDetail[2,] <- parseBookDetail(r[[2]])
#BookDetail
edition <- xpathSApply(r[[11]], "./edition", xmlValue)
EditionDetail[1,] <- parseEditionDetail(edition, "2000-12-16")
EditionDetail
idx <- checkEdition(edition, "2000-12-16")
#idx <- checkTitle("XML Developer's Guide1", BookDetail)
#idx
#BookDetail[1,] <- parseBookDetail(r[[1]])
# BookDetail[2,] <- parseBookDetail(r[[2]])
#BookDetail
edition <- xpathSApply(r[[11]], "./edition", xmlValue)
EditionDetail[1,] <- parseEditionDetail(edition, "2000-12-16")
EditionDetail[2,] <- parseEditionDetail(5, "2022-12-16")
EditionDetail
idx <- checkEdition(edition, "2000-12-16")
idx
#idx <- checkTitle("XML Developer's Guide1", BookDetail)
#idx
library(XML)
wd = getwd()
fpath = paste0(wd, "/")
# read XML file
xmlFile <- paste0(fpath, "Books-v3.xml")
xmlObj <- xmlParse(xmlFile)
# get the size of DOM
r <- xmlRoot(xmlObj)
size <- xmlSize(r)
# stringsAsFactors=F tells R not to convert character vectors into factors when creating a data frame
BookDetail <- data.frame(title = character(),
author = character(),
genre = character(),
price = numeric(),
description = character(),
stringsAsFactors = F)
EditionDetail <- data.frame(eid = integer(),
edition = character(),
publish_date = character(),
stringsAsFactors = F)
Book <- data.frame(bid = integer(),
title = character(),
eid = integer(),
stringsAsFactors = F)
checkTitle <- function(title) {
index <- match(title, BookDetail$title)
if (!is.na(index)) {
return(index)
} else {
return(-1)
}
}
checkEdition <- function(edition, publish_date) {
# check if EditionDetail data frame contains the row
row_index <- which(EditionDetail$edition == edition & EditionDetail$publish_date == publish_date)
if (length(row_index) > 0) {
return(row_index)
} else {
return(-1)
}
}
parseBookDetail <- function(curNode)
{
# if using //book/title, even pass the single node, it will extract titles of the whole document
title <- xpathSApply(curNode, "./title", xmlValue)
author <- xpathSApply(curNode, "./author", xmlValue)
genre <- xpathSApply(curNode, "./genre", xmlValue)
price <- as.numeric(xpathSApply(curNode, "./price", xmlValue))
description <- xpathSApply(curNode, "./description", xmlValue)
newBookDetail.df <- data.frame(title, author, genre, price, description, stringsAsFactors = F)
return(newBookDetail.df)
}
parseEditionDetail <- function(eid, edition, publish_date)
{
# no edition, default 1
if(length(edition) != 1){
edition <- 1
} else {
edition <- as.integer(edition)
}
newEditionDetail.df <- data.frame(eid, edition, publish_date, stringsAsFactors = F)
return(newEditionDetail.df)
}
#BookDetail[1,] <- parseBookDetail(r[[1]])
# BookDetail[2,] <- parseBookDetail(r[[2]])
#BookDetail
edition <- xpathSApply(r[[11]], "./edition", xmlValue)
EditionDetail[1,] <- parseEditionDetail(1, edition, "2000-12-16")
EditionDetail[2,] <- parseEditionDetail(2, 5, "2022-12-16")
EditionDetail
idx <- checkEdition(edition, "2000-12-16")
idx
#idx <- checkTitle("XML Developer's Guide1", BookDetail)
#idx
checkTitle <- function(title) {
index <- match(title, BookDetail$title)
if (!is.na(index)) {
return(index)
} else {
return(-1)
}
}
checkEdition <- function(edition, publish_date) {
# no edition, default 1
if(length(edition) != 1){
edition <- 1
} else {
edition <- as.integer(edition)
}
# check if EditionDetail data frame contains the row
row_index <- which(EditionDetail$edition == edition & EditionDetail$publish_date == publish_date)
if (length(row_index) > 0) {
return(row_index)
} else {
return(-1)
}
}
#BookDetail[1,] <- parseBookDetail(r[[1]])
# BookDetail[2,] <- parseBookDetail(r[[2]])
#BookDetail
edition <- xpathSApply(r[[11]], "./edition", xmlValue)
EditionDetail[1,] <- parseEditionDetail(1, edition, "2000-12-16")
EditionDetail[2,] <- parseEditionDetail(2, 5, "2022-12-16")
EditionDetail
idx <- checkEdition(edition, "2000-12-16")
idx
#idx <- checkTitle("XML Developer's Guide1", BookDetail)
#idx
#BookDetail[1,] <- parseBookDetail(r[[1]])
# BookDetail[2,] <- parseBookDetail(r[[2]])
#BookDetail
edition <- xpathSApply(r[[11]], "./edition", xmlValue)
EditionDetail[1,] <- parseEditionDetail(1, edition, "2000-12-16")
EditionDetail[2,] <- parseEditionDetail(2, 5, "2022-12-16")
EditionDetail
idx <- checkEdition(5, "2022-12-16")
idx
#idx <- checkTitle("XML Developer's Guide1", BookDetail)
#idx
library(knitr)
imageURL <- "https://i.imgur.com/l3ng4N5.jpg"
knitr::include_graphics(imageURL)
library(knitr)
imageURL <- "https://i.imgur.com/l3ng4N5.jpg"
knitr::include_graphics(imageURL)
library(RSQLite)
# connect to sqlite db
wd = getwd()
fpath = paste0(wd, "/")
dbfile = "xml_sqlite.db"
dbcon <- dbConnect(RSQLite::SQLite(), paste0(fpath, dbfile))
library(XML)
wd = getwd()
fpath = paste0(wd, "/")
# read XML file
xmlFile <- paste0(fpath, "Books-v3.xml")
xmlObj <- xmlParse(xmlFile)
# get the size of DOM
r <- xmlRoot(xmlObj)
size <- xmlSize(r)
# stringsAsFactors=F tells R not to convert character vectors into factors when creating a data frame
BookDetail <- data.frame(title = character(),
author = character(),
genre = character(),
price = numeric(),
description = character(),
stringsAsFactors = F)
EditionDetail <- data.frame(eid = integer(),
edition = integer(),
publish_date = character(),
stringsAsFactors = F)
Book <- data.frame(bid = integer(),
title = character(),
eid = integer(),
stringsAsFactors = F)
checkTitle <- function(title) {
index <- match(title, BookDetail$title)
if (!is.na(index)) {
return(index)
} else {
return(-1)
}
}
checkEdition <- function(edition, publish_date) {
# check if EditionDetail data frame contains the row
row_index <- which(EditionDetail$edition == edition & EditionDetail$publish_date == publish_date)
if (length(row_index) > 0) {
return(row_index)
} else {
return(-1)
}
}
parseBookDetail <- function(curNode)
{
# if using //book/title, even pass the single node, it will extract titles of the whole document
title <- xpathSApply(curNode, "./title", xmlValue)
author <- xpathSApply(curNode, "./author", xmlValue)
genre <- xpathSApply(curNode, "./genre", xmlValue)
price <- as.numeric(xpathSApply(curNode, "./price", xmlValue))
description <- xpathSApply(curNode, "./description", xmlValue)
newBookDetail.df <- data.frame(title, author, genre, price, description, stringsAsFactors = F)
return(newBookDetail.df)
}
bdIdx <- 1
edIdx <- 1
bkIdx <- 1
for (i in 1:size){
# get current book
curBookNode <- r[[i]]
# new title, add to BookDetail data frame
title <- xpathSApply(curBookNode, "./title", xmlValue)
if(checkTitle(title) == -1){
BookDetail[bdIdx,] <- parseBookDetail(curBookNode)
bdIdx <- bdIdx + 1
}
edition <- xpathSApply(curBookNode, "./edition", xmlValue)
publish_date <- xpathSApply(curBookNode, "./publish_date", xmlValue)
# no edition, default 1
if(length(edition) != 1){
edition <- as.integer(1)
} else {
edition <- as.integer(edition)
}
# new edition detail, add to EditionDetail data frame
if(checkEdition(edition, publish_date) == -1){
eid <- as.integer(edIdx)
EditionDetail[edIdx,] <- data.frame(eid, edition, publish_date, stringsAsFactors = F)
edIdx <- edIdx + 1
}
# add to Book dataframe
bid <- xmlAttrs(r[[i]])[[1]]
# get the eid
eid <- checkEdition(edition, publish_date)
Book[bkIdx,] <- data.frame(bid, title, eid, stringsAsFactors = F)
bkIdx <- bkIdx + 1
}
Book
BookDetail
EditionDetail
dbWriteTable(dbcon, "BookDetail", BookDetail, overwrite = T)
dbWriteTable(dbcon, "EditionDetail", EditionDetail, overwrite = T)
dbWriteTable(dbcon, "Book", Book, overwrite = T)
dbDisconnect(dbcon)
library(knitr)
imageURL <- "https://i.imgur.com/l3ng4N5.jpg"
knitr::include_graphics(imageURL)
