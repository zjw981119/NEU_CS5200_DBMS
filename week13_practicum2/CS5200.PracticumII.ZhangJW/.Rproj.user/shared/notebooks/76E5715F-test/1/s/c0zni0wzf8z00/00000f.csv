"0","extractDate <- function(journalNode)"
"0","{"
"0","  # check the date in xml"
"0","  medlineDateNode <- xpathSApply(journalNode, "".//MedlineDate"")"
"0","  # date in range "
"0","  if(length(medlineDateNode) > 0){"
"0","    date_str <- xpathSApply(journalNode, "".//MedlineDate"", xmlValue)"
"0","    # The strsplit() function returns a list of character vectors, with each element of the list representing a split result."
"0","    date_parts <- strsplit(date_str, "" "")[[1]]"
"0","    # ""1975-1976"" || ""1975-1976 Winter"" ""1975-1976 Fall-Winter"""
"0","    # ""1975-1976 ..."" case, get the latter year, set the month and day to ""01"""
"0","    if(nchar(date_parts[[1]]) == 9){"
"0","      year_str <- strsplit(date_parts, ""-"")[[1]][[2]]"
"0","      pub_date <- sprintf(""%s-01-01"", year_str)"
"0","    } else {"
"0","      # ""1975 Jul-Aug"""
"0","      year_str <- date_parts[[1]]"
"0","      if(length(date_parts) == 2){"
"0","        # take the first month"
"0","        month_str <- strsplit(date_parts[[2]], ""-"")[[1]][[1]]"
"0","        # convert to upper case"
"0","        # handle diffrent month_abb cases: ""Mar"", ""MAR"""
"0","        month_num <- match(toupper(month_str), toupper(month.abb))"
"0","        # Create a standard date format string"
"0","        pub_date <- sprintf(""%s-%02d-01"", year_str, month_num)"
"0","      } else if(length(date_parts) == 3){"
"0","        # ""1975 Aug 15-31"""
"0","        if(nchar(date_parts[[2]]) == 3){"
"0","          month_str <- date_parts[[2]]"
"0","          month_num <- match(toupper(month_str), toupper(month.abb))"
"0","          day_str <- strsplit(date_parts[[3]], ""-"")[[1]][[1]]"
"0","          day_num <- as.integer(day_str)"
"0","          pub_date <- sprintf(""%s-%02d-%02d"", year_str, month_num, day_num)"
"0","        } else {"
"0","          # ""1976 Dec-1977 Jan"""
"0","          month_str <- date_parts[3]"
"0","          month_num <- match(toupper(month_str), toupper(month.abb))"
"0","          # get the latter year"
"0","          year_str <- strsplit(date_parts[[2]], ""-"")[[1]][[2]]"
"0","          pub_date <- sprintf(""%s-%02d-01"", year_str, month_num)"
"0","        }"
"0","      }"
"0","    }"
"0","  } else {"
"0","    # year, month and day are separate"
"0","    year_str <- xpathSApply(journalNode, "".//Year"", xmlValue)"
"0","    month_str <- xpathSApply(journalNode, "".//Month"", xmlValue)"
"0","    day_str <- xpathSApply(journalNode, "".//Day"", xmlValue)"
"0","    season_str <- xpathSApply(journalNode, "".//Season"", xmlValue)"
"0","    "
"0","    # check season, if season exists, no month and day"
"0","    if(length(season_str) != 0){"
"0","      month_num <- switch(toupper(season_str),"
"0","                    ""SPRING"" = 3,"
"0","                    ""SUMMER"" = 6,"
"0","                    ""FALL"" = 9,"
"0","                    ""WINTER"" = 12,"
"0","                    1)"
"0","      pub_date <- sprintf(""%s-%02d-01"", year_str, month_num)"
"0","    } else {"
"0","      # year, month, day"
"0","      # check month"
"0","      if(length(month_str) == 0){"
"0","        month_num <- 1 # default value"
"0","      } else {"
"0","        month_num <- match(toupper(month_str), toupper(month.abb))"
"0","        # month_str is number characters: ""04"", ""10"""
"0","        if(is.na(month_num)){"
"0","          month_num <- as.integer(month_str)"
"0","        }"
"0","      }"
"0","      "
"0","      # check day"
"0","      if(length(day_str) == 0){"
"0","        day_str <- ""01"" # default value"
"0","      }"
"0","      "
"0","      # Create a standard date format string"
"0","      pub_date <- sprintf(""%s-%02d-%s"", year_str, month_num, day_str)"
"0","    }"
"0","  }"
"0","  return(pub_date)"
"0","}"
