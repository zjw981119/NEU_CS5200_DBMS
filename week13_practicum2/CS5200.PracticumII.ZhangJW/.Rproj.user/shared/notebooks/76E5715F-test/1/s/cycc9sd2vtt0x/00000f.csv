"0","# parse authors from author list"
"0","parseAuthors <- function(authorListNode, baseIdx)"
"0","{"
"0","  tmp_df <- data.frame(au_id = integer(),"
"0","                       last_name = character(),"
"0","                       first_name = character(),"
"0","                       initials = character(),"
"0","                       suffix = character(),"
"0","                       stringsAsFactors = F)"
"0","  "
"0","  authors <- xpathSApply(authorListNode, "".//Author"")"
"0","  # iterate authors"
"0","  for(i in 1 : length(authors)){"
"0","    last_name <- xpathSApply(authors[[i]], "".//LastName"", xmlValue)"
"0","    first_name <- xpathSApply(authors[[i]], "".//ForeName"", xmlValue)"
"0","    initials <- xpathSApply(authors[[i]], "".//Initials"", xmlValue)"
"0","    suffix <- xpathSApply(authors[[i]], "".//Suffix"", xmlValue)"
"0","    # handle non-exist fields"
"0","    if(length(last_name) == 0){"
"0","      last_name <- ""unknown"""
"0","    }"
"0","    if(length(first_name) == 0){"
"0","      first_name <- ""unknown"""
"0","    }"
"0","    if(length(initials) == 0){"
"0","      initials <- ""unknown"""
"0","    }"
"0","    if(length(suffix) == 0){"
"0","      suffix <- ""unknown"""
"0","    }"
"0","    # the new author shouldn't exist in both Author df and tmp df"
"0","    tmp_idx <- which(tmp_df$last_name == last_name & tmp_df$first_name == first_name "
"0","                     & tmp_df$initials == initials & tmp_df$suffix == suffix)"
"0","    # two authors with same last_name, first_name and initials with different suffix are consindered different authors"
"0","    if(checkAuthor(last_name, first_name, initials, suffix) == -1 && length(tmp_idx) == 0){"
"0","      new_author <- data.frame(au_id = as.integer(nrow(tmp_df) + baseIdx), last_name, first_name, initials, suffix, stringsAsFactors = F)"
"0","      # combine two data frames"
"0","      tmp_df <- rbind(tmp_df, new_author)"
"0","    }"
"0","  }"
"0","  "
"0","  # return updated data frame"
"0","  return(tmp_df)"
"0","}"
"0",""
